import os
import shutil
import sys
import unittest

from scripts import model_gen
from scripts.ccmodel import CCModel
from mako.template import Template

sys.path.append('..')
from modelparsing.exceptions import ConsistencyError
from modelparsing.parser import Parser
from tst import folderpath
sys.path.remove('..')


class TestParser(unittest.TestCase):
    '''
    Tests for the Parser class.
    More or less a complete functional test.
    '''

    class Args:
        '''
        Represent args, that parser needs.
        '''

        def __init__(self, modelpath):
            self._modelpath = modelpath

        @property
        def modelpath(self):
            return self._modelpath

    def __init__(self, *args, **kwargs):
        super(TestParser, self).__init__(*args, **kwargs)
        # create temp folder
        if not os.path.isdir(folderpath):
            os.mkdir(folderpath)
        # test specific folder in temp folder
        test = self._testMethodName + '/'
        self.folderpath = os.path.join(folderpath, test)
        if not os.path.isdir(self.folderpath):
            os.mkdir(self.folderpath)

    def __del__(self):
        if os.path.isdir(folderpath) and not os.listdir(folderpath):
            try:
                os.rmdir(folderpath)
            except OSError:
                pass

    def setUp(self):
        # frequently used variables
        self.ftype = 'I'
        self.inttype = 'uint32_t'
        self.opc = 0x02
        self.funct3 = 0x00

        # prepare header and cc file
        self.opcheader = self.folderpath + 'opcheader.h'
        with open(self.opcheader, 'w') as fh:
            fh.write(
                '/* Automatically generated by parse-opcodes.  */\n' +
                '#ifndef RISCV_ENCODING_H\n' +
                '#define RISCV_ENCODING_H\n')
        self.opcsource = self.folderpath + 'opcsource.c'
        with open(self.opcsource, 'w') as fh:
            fh.write('')

    def tearDown(self):
        # remove generated file
        if hasattr(self, '_outcome'):  # Python 3.4+
            # these 2 methods have no side effects
            result = self.defaultTestResult()
            self._feedErrorsToResult(result, self._outcome.errors)
        else:
            # Python 3.2 - 3.3 or 3.0 - 3.1 and 2.7
            result = getattr(self, '_outcomeForDoCleanups',
                             self._resultForDoCleanups)

        error = ''
        if result.errors and result.errors[-1][0] is self:
            error = result.errors[-1][1]

        failure = ''
        if result.failures and result.failures[-1][0] is self:
            failure = result.failures[-1][1]

        if not error and not failure:
            shutil.rmtree(self.folderpath)

    def genModel(self, name, filename, funct7=0xff, faults=[]):
        '''
        Create local cc Model and from that cc file.
        '''
        self.ccmodel = CCModel(name,
                               self.ftype,
                               self.inttype,
                               self.opc,
                               self.funct3,
                               funct7,
                               faults)

        # generate .cc models
        modelgen = Template(filename=model_gen)

        with open(filename, 'w') as fh:
            fh.write(modelgen.render(model=self.ccmodel))

    def testExtendHeaderCopyOld(self):
        # insert a function (do not car if correctly added or not)
        # and check if old header was copied and stored correctly
        name = 'copyheader'
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        args = self.Args(filename)
        parser = Parser(args)
        parser.opch = self.opcheader
        parser.extend_header()

        # now the header file should have been copied
        # check in our folder if we have a file
        opch_old = self.opcheader + '_old'
        self.assertTrue(os.path.exists(opch_old))
        self.assertTrue(os.path.isfile(opch_old))
        # check contents of file
        with open(opch_old, 'r') as fh:
            content = fh.readlines()
        self.assertEqual(len(content), 3)
        self.assertEqual(
            content[0], '/* Automatically generated by parse-opcodes.  */\n')
        self.assertEqual(content[1], '#ifndef RISCV_ENCODING_H\n')
        self.assertEqual(content[2], '#define RISCV_ENCODING_H\n')

    def testExtendHeaderSingle(self):
        # extend the header with a single model
        name = 'singleHeader'
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        args = self.Args(filename)
        parser = Parser(args)
        parser.opch = self.opcheader
        parser.extend_header()

        with open(self.opcheader, 'r') as fh:
            hcontent = fh.readlines()

        # first match then mask
        self.assertEqual(hcontent[3], parser.instructions[0].match)
        self.assertEqual(hcontent[4], parser.instructions[0].mask)

    def testExtendHeaderMultiple(self):
        # extend the header with multiple models
        name = 'testHeader0'
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        name = 'testHeader1'
        self.funct3 = 0x01
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        name = 'testHeader2'
        self.opc = 0x0a
        self.funct3 = 0x00
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        name = 'testHeader3'
        self.funct3 = 0x01
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        args = self.Args(self.folderpath)
        parser = Parser(args)
        parser.opch = self.opcheader
        parser.extend_header()

        with open(self.opcheader, 'r') as fh:
            hcontent = fh.readlines()

        # basically check if all masks and matches where added
        # maybe extend the test a little? don't know
        for inst in parser.instructions:
            self.assertTrue(inst.match in hcontent)
            self.assertTrue(inst.mask in hcontent)

    def testExtendHeaderSameTwice(self):
        # extend the header two times with the same function
        # should occure only once in header
        name = 'sameFctTwice'
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        args = self.Args(filename)
        parser1 = Parser(args)
        parser1.opch = self.opcheader
        parser1.extend_header()

        parser2 = Parser(args)
        parser2.opch = self.opcheader
        parser2.extend_header()

        with open(self.opcheader, 'r') as fh:
            hcontent = fh.readlines()

        # only added once
        # therefore header file should have 5 entries
        self.assertEqual(len(hcontent), 5)
        self.assertEqual(hcontent[3], parser1.instructions[0].match)
        self.assertEqual(hcontent[3], parser1.instructions[-1].match)
        self.assertEqual(hcontent[3], parser2.instructions[0].match)
        self.assertEqual(hcontent[3], parser2.instructions[-1].match)
        self.assertEqual(hcontent[4], parser1.instructions[0].mask)
        self.assertEqual(hcontent[4], parser1.instructions[-1].mask)
        self.assertEqual(hcontent[4], parser2.instructions[0].mask)
        self.assertEqual(hcontent[4], parser2.instructions[-1].mask)

    def testExtendHeaderSameName(self):
        # extend the header file with the same name but different opcode
        # the last one should be taken
        # the other ones deleted
        name = 'sameFctName'
        filename = self.folderpath + name + '1.cc'

        self.genModel(name, filename)

        args = self.Args(filename)
        # add first function
        parser = Parser(args)
        parser.opch = self.opcheader
        parser.extend_header()

        inst1 = parser.instructions[-1]

        filename = self.folderpath + name + '3.cc'
        self.opc = 0x0a
        self.funct3 = 0x05
        self.ftype = 'R'
        funct7 = 0x00
        self.genModel(name, filename, funct7=funct7)

        args = self.Args(filename)
        parser3 = Parser(args)
        parser3.opch = self.opcheader
        parser3.extend_header()

        inst3 = parser3.instructions[-1]

        filename = self.folderpath + name + '2.cc'
        self.opc = 0x0a
        self.ftype = 'I'
        self.genModel(name, filename)

        args = self.Args(filename)
        parser2 = Parser(args)
        parser2.opch = self.opcheader
        parser2.extend_header()

        inst2 = parser2.instructions[-1]

        with open(self.opcheader, 'r') as fh:
            hcontent = fh.readlines()

        # only one function should be in
        self.assertEqual(len(hcontent), 5)
        # check if first function is in but not second one
        self.assertTrue(inst1.match in hcontent)
        self.assertTrue(inst1.mask in hcontent)
        # match is the same
        self.assertFalse(inst2.match in hcontent)
        self.assertFalse(inst2.mask in hcontent)
        self.assertFalse(inst3.match in hcontent)
        self.assertFalse(inst3.mask in hcontent)

    def testExtendHeaderSameMaskDifferentMatch(self):
        # try to generate two functions with different match but same mask
        # both should appear in header
        # how do we do that? try different func3
        name = 'func1'
        filename = self.folderpath + name + '.cc'
        self.genModel(name, filename)

        name = 'func2'
        filename = self.folderpath + name + '.cc'
        self.funct3 += 1
        self.genModel(name, filename)

        args = self.Args(self.folderpath)
        parser = Parser(args)
        parser.opch = self.opcheader
        parser.extend_header()

        with open(self.opcheader, 'r') as fh:
            hcontent = fh.readlines()

        self.assertTrue(parser.instructions[0].match in hcontent)
        self.assertTrue(parser.instructions[0].mask in hcontent)
        self.assertTrue(parser.instructions[-1].match in hcontent)
        self.assertTrue(parser.instructions[-1].mask in hcontent)
        self.assertTrue(parser.instructions[1].match in hcontent)
        self.assertTrue(parser.instructions[1].mask in hcontent)
        self.assertTrue(parser.instructions[-2].match in hcontent)
        self.assertTrue(parser.instructions[-2].mask in hcontent)

        self.assertEqual(len(parser.instructions), 2)
        self.assertEqual(len(hcontent), 7)
